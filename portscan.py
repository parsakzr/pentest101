#!/usr/bin/python
import socket
import sys
import re
import time
# import threading


class Colors:
    Black = '\u001b[30m'
    Red = '\u001b[31m'
    Green = '\u001b[32m'
    Yellow = '\u001b[33m'
    Blue = '\u001b[34m'
    Magenta = '\u001b[35m'
    Cyan = '\u001b[36m'
    White = '\u001b[37m'

    Background_Black = '\u001b[40m'
    Background_Red = '\u001b[41m'
    Background_Green = '\u001b[42m'
    Background_Yellow = '\u001b[43m'
    Background_Blue = '\u001b[44m'
    Background_Magenta = '\u001b[45m'
    Background_Cyan = '\u001b[46m'
    Background_White = '\u001b[47m'

    Bold = '\u001b[1m'
    Underline = '\u001b[4m'
    Reversed = '\u001b[7m'

    Reset = '\u001b[0m'

# Func ----------------------------------------------------------------------
def getinfo(host):
    if re.match("^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.)"
                "{3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$", target):  # ipv4
        print("IP Address: " + Colors.Bold + Colors.Magenta + host + Colors.Reset)
    elif re.match("^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)"
                  "*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$", target):  # hostname
        print("Hostname: " + Colors.Bold + Colors.Magenta + host,
              "(", socket.gethostbyname(host), ")" + Colors.Reset)
    else:
        print(Colors.Red + "No valid IP address / Hostname!" + Colors.Reset)


def scanTCP(t, p):
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  # IPv4 - TCP Family
        sock.settimeout(0.5)  # Timeout = 0.5
        sock.connect((t, p))
        sock.close()
        return True
    except KeyboardInterrupt: # with the try/catch on main, it just continues to scan next port
        print(Colors.Red + "Interrupted  ^C" + Colors.Reset) 
        sys.exit()
    except:
        return False


# Bann ----------------------------------------------------------------------
print(Colors.Cyan + Colors.Bold + "PortScan v1.0" + Colors.Reset)
print('-' * 60)


# Parsing console arguments -------------------------------------------------
if len(sys.argv) == 1:  # Print Help page
    print(Colors.Bold + "Usage: " + Colors.Reset)
    print("./portscan.py target first_port last_port [Options]")
    print("\t" + Colors.Bold + "Options: " + Colors.Reset)
    print("\t-v : verbose mode")
    sys.exit()
else:
    target = sys.argv[1]
    port_s = int(sys.argv[2])
    port_e = int(sys.argv[3])
    is_verbose = False
    if len(sys.argv) >= 5:
        is_verbose = sys.argv[4] == "-v"

# Main ----------------------------------------------------------------------
try:
    getinfo(target)

    # threads = []
    ports_open = []

    start_time = time.time()
    for port in range(port_s, port_e + 1):
        '''T = threading.Thread(target=scanTCP, args=(target, port))
        threads.append(T)
        T.daemon = True
        T.start()
        #[t.join() for t in threads]'''

        if scanTCP(target, port):
            print("[*] Port:", port, Colors.Green + "\tOPEN" + Colors.Reset)
            ports_open.append(port)  # save open ports on a list
        elif is_verbose:
            print("[*] Port:", port, Colors.Red + "\tCLOSED" + Colors.Reset)

    time_difference = round((time.time() - start_time), 2)  # 2 decimal

    print("-" * 30)
    print("Open Ports:", ports_open)
    print("-" * 30)
    print("Scan Completed in", Colors.Bold + str(time_difference) + Colors.Reset, "seconds")


except socket.gaierror:
    print(Colors.Red + "IP/Hostname couldn't be resolved!" + Colors.Reset)
    sys.exit()
except socket.error:
    print(Colors.Red + "Socket Sucked!" + Colors.Reset)
    sys.exit()
except KeyboardInterrupt:
    print(Colors.Red + "Interrupted  ^C" + Colors.Reset)
    sys.exit()
